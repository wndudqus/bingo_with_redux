{"version":3,"sources":["components/Button.ts","components/BingoGameHeader.tsx","components/Cell.tsx","components/BingoBoard.tsx","components/CompletedLinesList.tsx","components/BingoPlayerArea.tsx","components/BingoGame.tsx","lib/bingoUtils.ts","modules/bingoGame.ts","container/BingoGameContainer.tsx","App.tsx","reportWebVitals.ts","modules/index.ts","index.tsx"],"names":["Button","styled","button","props","color","StyledHeader","header","BingoGameHeader","isPlaying","onClick","className","CellStyleButton","Cell","id","boardNumber","isChecked","selectCell","BingoBoardSection","section","BingoBoard","isActive","cells","onClickBoard","useCallback","e","alert","map","row","index","CompletedLinesListSection","CompletedLinesList","completedLines","line","cell","BingoPlayerAreaSection","BingoPlayerArea","playerNumber","isCurrentPlayer","completedLine","BingoGameSection","BingoGame","toggleGame","players","createEmptyBingoGame","NumberOfPlayers","boardSize","initValues","bingoPlayerAreaInfo","i","push","createEmptyPlayer","bingoGameSate","currentPlayer","currentRound","initCells","randValues","createRandValues","j","pop","player","Array","intersectionCells","prevLines","newLines","filter","newLine","some","prevLine","isSameValuedCellArray","cellA","cellB","JSON","stringify","start","end","values","shuffle","value","Math","random","sort","a","b","calcNextPlayer","round","getBingoLines","totalBingoLines","reduce","bingo","bingoLine","diagnalBingoOne","diagnalCellsOne","diagnalBingoTwo","diagnalCellsTwo","checkCellInCells","targetCell","TOGGLE_GAME","SELECT_CELL","RESET_GAME","initialBingoGameState","bingoGameReducer","state","action","type","selectedCell","length","checkedCells","newCompletedLines","connect","winner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","composeWithDevTools","subscribe","onWin","forEach","window","confirm","notifyWinner","checkWinner","getState","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.967b7751.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\nwidth:fit-content;\r\nmin-width:80px;\r\nheight:35px;\r\nborder:none;\r\nborder-radius:5px;\r\nmargin:1rem;\r\ncursor: pointer;\r\ncolor:white;\r\nfont-size:1.2rem;\r\nbackground-color:${props => (props.color || \"#F82F62\")};\r\n\r\n    &:focus{\r\n        outline:none;\r\n    }\r\n    &:active{\r\n        outline:none;\r\n       background-color:rgb(51, 52, 55);\r\n    }\r\n`;\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\nconst StyledHeader = styled.header`\r\n\tdisplay: flex;\r\n\theight: 10%;\r\n\tbackground-color: rgb(51, 52, 55);\r\n\r\n\t.header_title {\r\n\t\tmargin: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n`;\r\n\r\n//props type\r\ntype BingoGameHeaderProps = {\r\n\tisPlaying: boolean;\r\n\tonClick: () => void;\r\n};\r\n\r\nexport default function BingoGameHeader({\r\n\tisPlaying,\r\n\tonClick,\r\n}: BingoGameHeaderProps) {\r\n\treturn (\r\n\t\t<StyledHeader>\r\n\t\t\t<h1 className=\"header_title\">WATCHA BINGO</h1>\r\n\t\t\t<div>\r\n\t\t\t\t<Button color={isPlaying ? 'gray' : ''} onClick={onClick}>\r\n\t\t\t\t\t{isPlaying ? '재시작' : '시작'}\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</StyledHeader>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CellStyleButton = styled.button`\r\n\twidth: 3vw;\r\n\theight: 3vw;\r\n\tmin-width: 50px;\r\n\tmin-height: 50px;\r\n\tmargin: 0.2rem;\r\n\tborder: none;\r\n\tcolor: rgb(41, 42, 45);\r\n\tfont-size: 1rem;\r\n\tborder-radius: 0.2rem;\r\n\tcursor: pointer;\r\n\tbackground-color: ${(props) => props.color || '#F82F62'};\r\n\r\n\t&:focus {\r\n\t\toutline: none;\r\n\t}\r\n\t&:active {\r\n\t\toutline: none;\r\n\t\tbackground-color: ${(props) => props.color || 'rgb(51, 52, 55);'};\r\n\t}\r\n\t&:hover {\r\n\t\tcolor: rgb(61, 62, 65);\r\n\t\tborder-style: solid;\r\n\t\tborder-color: rgb(248, 47, 98);\r\n\t\tborder-width: 2px;\r\n\t}\r\n`;\r\n\r\n//cell을 저장 할 때 타입.\r\nexport type CellInfo = {\r\n\tid: number;\r\n\tboardNumber: number;\r\n\tisChecked: boolean;\r\n};\r\n\r\n//props type\r\nexport type CellProps = {\r\n\tid: number;\r\n\tboardNumber: number;\r\n\tisChecked: boolean;\r\n\tselectCell: (selectedCell: CellInfo) => void;\r\n};\r\n\r\nexport default function Cell({\r\n\tid,\r\n\tboardNumber,\r\n\tisChecked,\r\n\tselectCell,\r\n}: CellProps) {\r\n\tconst onClick = () => {\r\n\t\treturn isChecked ? () => {} : selectCell({ id, boardNumber, isChecked });\r\n\t};\r\n\treturn (\r\n\t\t<CellStyleButton color={isChecked ? '#F82F62' : 'white'} onClick={onClick}>\r\n\t\t\t{id ? id : ''}\r\n\t\t</CellStyleButton>\r\n\t);\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport Cell, { CellInfo } from './Cell';\r\n\r\nconst BingoBoardSection = styled.section`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\t.cells-area {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tflex-flow: wrap column;\r\n\t}\r\n\t.cells-row {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t}\r\n`;\r\n\r\n//props type\r\ntype BingoBoardProps = {\r\n\tisPlaying: boolean;\r\n\tisActive: boolean;\r\n\tcells: CellInfo[][];\r\n\tselectCell: (selectedCell: CellInfo) => void;\r\n};\r\n\r\nexport default function BingoBoard({\r\n\tisPlaying,\r\n\tisActive,\r\n\tcells,\r\n\tselectCell,\r\n}: BingoBoardProps) {\r\n\tconst onClickBoard = useCallback(\r\n\t\t(e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n\t\t\tif (isActive || !isPlaying) return;\r\n\t\t\telse alert('올바른 차례가 아닙니다.');\r\n\t\t},\r\n\t\t[isActive, isPlaying],\r\n\t);\r\n\r\n\treturn (\r\n\t\t<BingoBoardSection onClick={onClickBoard}>\r\n\t\t\t<div className=\"cells-area\">\r\n\t\t\t\t{cells.map((row: CellInfo[], index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"cells-row\"\r\n\t\t\t\t\t\t\tkey={`board_row:${row[0].boardNumber}_${index}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{row.map(({ id, boardNumber, isChecked }: CellInfo, index) => (\r\n\t\t\t\t\t\t\t\t<Cell\r\n\t\t\t\t\t\t\t\t\tkey={`cell_${boardNumber}_${id}_${index}`}\r\n\t\t\t\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\t\t\t\tboardNumber={boardNumber}\r\n\t\t\t\t\t\t\t\t\tisChecked={isChecked}\r\n\t\t\t\t\t\t\t\t\tselectCell={selectCell}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</BingoBoardSection>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CellInfo } from './Cell';\r\n\r\nconst CompletedLinesListSection = styled.section`\r\n\tdisplay: flex;\r\n\tflex-flow: wrap column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\t.completed-lines-header {\r\n\t\tfont-size: 1.1rem;\r\n\t}\r\n\t.completed-lines {\r\n\t\tdisplay: flex;\r\n\t\tflex-flow: wrap column;\r\n\t\tmargin: 1rem;\r\n\t\t.completed-lines-row {\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-flow: row;\r\n\t\t\tjustify-content: center;\r\n\t\t\tborder: 1px;\r\n\t\t\tborder-style: solid;\r\n\t\t\t.cell {\r\n\t\t\t\tmargin: 0.4rem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n//props type\r\ntype CompletedLinesListProps = {\r\n\tcompletedLines: CellInfo[][];\r\n};\r\n\r\n//완성된 줄을 리스트로 보여주는 컴포넌트\r\nexport default function CompletedLinesList({\r\n\tcompletedLines,\r\n}: CompletedLinesListProps) {\r\n\treturn (\r\n\t\t<CompletedLinesListSection>\r\n\t\t\t<div className=\"completed-lines-header\">\r\n\t\t\t\t<h1>Completed lines</h1>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"completed-lines\">\r\n\t\t\t\t{completedLines.map((line, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"completed-lines-row\"\r\n\t\t\t\t\t\t\tkey={`completed-row_${index}_${line[0].id}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{line.map((cell) => (\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName=\"cell\"\r\n\t\t\t\t\t\t\t\t\tkey={`completed-line-cell_${cell.id}_${cell.boardNumber}`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{cell.id}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</CompletedLinesListSection>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BingoBoard from './BingoBoard';\r\nimport { CellInfo } from './Cell';\r\nimport CompletedLinesList from './CompletedLinesList';\r\n\r\nconst BingoPlayerAreaSection = styled.section`\r\n\theight: 45%;\r\n\tdisplay: flex;\r\n\tflex-flow: nowrap column;\r\n\tjustify-content: flex-start;\r\n\talign-items: space-around;\r\n\tbackground-color: ${(props) => props.color};\r\n\r\n\tmargin: 1rem;\r\n\t.player-name {\r\n\t\ttext-align: center;\r\n\t\tmargin: 1rem 0 0.5rem 0;\r\n\t\tfont-size: 1.5rem;\r\n\t}\r\n\t.game-area {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-around;\r\n\t\tmargin: 1rem 0 1rem 0;\r\n\t}\r\n`;\r\n\r\nexport type BingoPlayerAreaInfo = {\r\n\tplayerNumber: number;\r\n\tisCurrentPlayer: boolean;\r\n\tcells: CellInfo[][];\r\n\tcompletedLine: CellInfo[][];\r\n};\r\n\r\n//props type\r\nexport type BingoPlayerAreaProps = {\r\n\tisPlaying: boolean;\r\n\tplayerNumber: number;\r\n\tisCurrentPlayer: boolean;\r\n\tcells: CellInfo[][];\r\n\tcompletedLine: CellInfo[][];\r\n\tselectCell: (selectedCell: CellInfo) => void;\r\n};\r\n\r\n// 한 사용자가 이용하는 영역을 랜더링 하는 컴포넌트\r\nexport default function BingoPlayerArea({\r\n\tisPlaying,\r\n\tplayerNumber,\r\n\tisCurrentPlayer,\r\n\tcells,\r\n\tcompletedLine,\r\n\tselectCell,\r\n}: BingoPlayerAreaProps) {\r\n\treturn (\r\n\t\t<BingoPlayerAreaSection\r\n\t\t\tcolor={isCurrentPlayer ? 'rgba(255,255,255,0.15)' : ''}\r\n\t\t>\r\n\t\t\t<h1 className=\"player-name\">player : {playerNumber}</h1>\r\n\t\t\t<div className=\"game-area\">\r\n\t\t\t\t<BingoBoard\r\n\t\t\t\t\tisPlaying={isPlaying}\r\n\t\t\t\t\tisActive={isCurrentPlayer}\r\n\t\t\t\t\tcells={cells}\r\n\t\t\t\t\tselectCell={selectCell}\r\n\t\t\t\t/>\r\n\t\t\t\t<CompletedLinesList completedLines={completedLine} />\r\n\t\t\t</div>\r\n\t\t</BingoPlayerAreaSection>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BingoGameHeader from './BingoGameHeader';\r\nimport BingoPlayerArea, { BingoPlayerAreaInfo } from './BingoPlayerArea';\r\nimport { CellInfo } from './Cell';\r\n\r\nconst BingoGameSection = styled.section`\r\n\theight: 100%;\r\n\t.bingo-game-body {\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-flow: wrap column;\r\n\t\tjustify-content: space-around;\r\n\t}\r\n`;\r\n\r\n//props type\r\nexport type BingoGameProps = {\r\n\tisPlaying: boolean;\r\n\tcurrentPlayer: number;\r\n\twinner: number;\r\n\ttoggleGame: () => void;\r\n\tselectCell: (selectedCell: CellInfo) => void;\r\n\tplayers: BingoPlayerAreaInfo[];\r\n};\r\n\r\nexport default function BingoGame({\r\n\tisPlaying,\r\n\ttoggleGame,\r\n\tplayers,\r\n\tselectCell,\r\n}: BingoGameProps) {\r\n\treturn (\r\n\t\t<BingoGameSection>\r\n\t\t\t<BingoGameHeader isPlaying={isPlaying} onClick={toggleGame} />\r\n\t\t\t<div className=\"bingo-game-body\">\r\n\t\t\t\t{players.map(\r\n\t\t\t\t\t({ playerNumber, isCurrentPlayer, cells, completedLine }) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<BingoPlayerArea\r\n\t\t\t\t\t\t\t\tkey={`player_area_${playerNumber}`}\r\n\t\t\t\t\t\t\t\tisPlaying={isPlaying}\r\n\t\t\t\t\t\t\t\tplayerNumber={playerNumber}\r\n\t\t\t\t\t\t\t\tisCurrentPlayer={isCurrentPlayer}\r\n\t\t\t\t\t\t\t\tcells={cells}\r\n\t\t\t\t\t\t\t\tcompletedLine={completedLine}\r\n\t\t\t\t\t\t\t\tselectCell={selectCell}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t},\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</BingoGameSection>\r\n\t);\r\n}\r\n","import { BingoPlayerAreaInfo } from \"../components/BingoPlayerArea\";\r\nimport { CellInfo } from \"../components/Cell\";\r\nimport { BingoGameState } from \"../modules/bingoGame\";\r\n\r\n//initValues 값에 따라 완전히 빈 game을 만들거나 값이 초기화되어있는 시작된 게임을 만든다.\r\nexport const createEmptyBingoGame = (NumberOfPlayers: number = 2, boardSize: number = 5, initValues: boolean = false): BingoGameState => {\r\n\r\n    let bingoPlayerAreaInfo: BingoPlayerAreaInfo[] = [];\r\n\r\n    for (let i = 0; i < NumberOfPlayers; i++) {\r\n        bingoPlayerAreaInfo.push(createEmptyPlayer(i + 1, boardSize, initValues));\r\n    }\r\n\r\n    const bingoGameSate: BingoGameState = {\r\n        isPlaying: initValues,\r\n        currentPlayer: 1,\r\n        currentRound: 1,\r\n        players: bingoPlayerAreaInfo\r\n    }\r\n    return bingoGameSate;\r\n}\r\n\r\n//플레이어 정보를 초기화 한다. initValues에 따라 cell들에 값을 할당할지 결정한다. \r\nexport const createEmptyPlayer = (playerNumber: number, boardSize: number = 5, initValues: boolean = false): BingoPlayerAreaInfo => {\r\n\r\n    const initCells: CellInfo[][] = [];\r\n\r\n    let randValues = createRandValues(1, boardSize * boardSize);\r\n    for (let i = 0; i < boardSize; i++) {\r\n        let row: CellInfo[] = [];\r\n        for (let j = 0; j < boardSize; j++) {\r\n            row.push({\r\n                id: initValues ? randValues.pop() as number : 0,\r\n                boardNumber: playerNumber,\r\n                isChecked: false,\r\n            })\r\n        }\r\n        initCells.push(row);\r\n    }\r\n\r\n    const player: BingoPlayerAreaInfo = {\r\n        playerNumber,\r\n        isCurrentPlayer: (playerNumber === 1) ? true : false,\r\n        cells: initCells,\r\n        completedLine: new Array<CellInfo[]>(0)\r\n    }\r\n\r\n    return player;\r\n}\r\n\r\n//newLines-prevLines  B cells에서 A cells의 특정 ROW와 같은 값이 있는 ROW를  제외시키는 함수\r\nexport const intersectionCells = (prevLines: CellInfo[][], newLines: CellInfo[][]): CellInfo[][] => {\r\n    return newLines.filter((newLine) => {\r\n        return !prevLines.some((prevLine) => isSameValuedCellArray(prevLine, newLine));\r\n    });\r\n}\r\n\r\n//두 배열을 문자열화 시켜 비교\r\nexport const isSameValuedCellArray = (cellA: CellInfo[], cellB: CellInfo[]): boolean => {\r\n    return JSON.stringify(cellA) === JSON.stringify(cellB);\r\n}\r\n\r\n//start-end 범위의 값을 1차원 배열에 랜덤한 순서로 넣어준다.\r\nexport const createRandValues = (start: number, end: number): number[] => {\r\n    const values: number[] = [];\r\n\r\n    for (let i = start; i <= end; i++) {\r\n        values.push(i);\r\n    }\r\n    const shuffled = shuffle(values);\r\n    return shuffled;\r\n}\r\n\r\n//입력된 배열내의 숫자들을 랜덤한 순서로 섞어준다.\r\nexport const shuffle = (values: number[]): number[] => {\r\n    return values\r\n        .map(value => ([Math.random(), value]))\r\n        .sort((a, b) => a[0] - b[0])\r\n        .map(value => value[1]);\r\n};\r\n\r\n//현 라운드와 사용자수를 이용해 다음 플레이어를 반환.\r\nexport const calcNextPlayer = (round: number, NumberOfPlayers: number = 2): number => {\r\n    return ((round) % NumberOfPlayers + 1);\r\n}\r\n\r\n//bingo를 충족하는 cell의 array 를 return한다. \r\nexport const getBingoLines = (boardSize: number, cells: CellInfo[][]): CellInfo[][] => {\r\n    let totalBingoLines: CellInfo[][] = [];\r\n\r\n    // 가로방향 bingo push\r\n    for (let i = 0; i < boardSize; i++) {\r\n        if (cells[i].reduce((bingo, cell) => bingo && cell.isChecked, true)) {\r\n            totalBingoLines.push(cells[i]);\r\n        }\r\n    }\r\n    // 세로방향 bingo push\r\n    for (let i = 0; i < boardSize; i++) {\r\n        let bingo = true;\r\n        let bingoLine: CellInfo[] = [];\r\n        for (let j = 0; j < boardSize; j++) {\r\n            bingo = bingo && cells[j][i].isChecked;\r\n            bingoLine.push(cells[j][i]);\r\n        }\r\n        if (bingo) {//빙고일 경우 i열 컬럼을 push\r\n            totalBingoLines.push(bingoLine);\r\n        }\r\n    }\r\n    // 대각선 bingo push\r\n    let diagnalBingoOne = true;\r\n    let diagnalCellsOne: CellInfo[] = [];\r\n    let diagnalBingoTwo = true;\r\n    let diagnalCellsTwo: CellInfo[] = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n        diagnalBingoOne = diagnalBingoOne && cells[i][boardSize - i - 1].isChecked;\r\n        diagnalBingoTwo = diagnalBingoTwo && cells[i][i].isChecked;\r\n        diagnalCellsOne.push(cells[i][boardSize - i - 1]);\r\n        diagnalCellsTwo.push(cells[i][i]);\r\n    }\r\n    if (diagnalBingoOne) {\r\n        totalBingoLines.push(diagnalCellsOne);\r\n    }\r\n    if (diagnalBingoTwo) {\r\n        totalBingoLines.push(diagnalCellsTwo);\r\n    }\r\n    return totalBingoLines;\r\n};\r\n\r\n//board 중 해당하는 cell을 교체 한 후 return\r\nexport const checkCellInCells = (cells: CellInfo[][], targetCell: CellInfo): CellInfo[][] => {\r\n    return cells.map((row) => {\r\n        return row.map((cell) => {\r\n            return (cell.id === targetCell.id) ? {\r\n                ...cell,\r\n                isChecked: true\r\n            } : cell\r\n        })\r\n    });\r\n}\r\n\r\n//action이 호출 된 후 승자가 나왔는지 확인하는 listener함수\r\nexport const checkWinner = (players: BingoPlayerAreaInfo[], onWin: () => void) => {\r\n    let winner: number[] = [];\r\n    players.forEach((player: BingoPlayerAreaInfo) => {\r\n        if (5 <= player.completedLine.length) {\r\n            winner.push(player.playerNumber);\r\n        }\r\n    });\r\n\r\n    //해당 로직만 async로 넘겨 다른 로직은 실행될 수 있도록 \r\n    const notifyWinner = async () => {\r\n        if (winner.length > 1) {\r\n            await window.confirm(\"무승부!\\n\\n 본 팝업이 꺼지면 게임이 초기화 됩니다.\");\r\n        }\r\n        else if (winner.length) {\r\n            await window.confirm(`Player - ${winner[0]}승리!\\n\\n 본 팝업이 꺼지면 게임이 초기화 됩니다.`);\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        onWin()\r\n    }\r\n\r\n    notifyWinner();\r\n\r\n\r\n}","import { BingoPlayerAreaInfo } from \"../components/BingoPlayerArea\";\r\nimport { CellInfo } from \"../components/Cell\";\r\nimport { calcNextPlayer, checkCellInCells, createEmptyBingoGame, getBingoLines, intersectionCells } from \"../lib/bingoUtils\";\r\n\r\n//action types\r\nconst TOGGLE_GAME = 'bingoGame/TOGGLE_GAME' as const;\r\nconst SELECT_CELL = 'bingoGame/SELECT_CELL' as const;\r\nconst RESET_GAME = 'bingoGame/RESET_GAME' as const;\r\n\r\n//actions\r\nexport const toggleGame = () => ({ type: TOGGLE_GAME });\r\nexport const selectCell = (selectedCell: CellInfo) => ({ type: SELECT_CELL, selectedCell });\r\nexport const resetGame = () => ({ type: RESET_GAME });\r\n\r\n//빙고게임의 state를 변화시키는 액션 타입\r\ntype BingoGameAction =\r\n    | ReturnType<typeof toggleGame>\r\n    | ReturnType<typeof selectCell>\r\n    | ReturnType<typeof resetGame>\r\n\r\n//빙고게임의 global state\r\nexport type BingoGameState = {\r\n    isPlaying: boolean;\r\n    currentPlayer: number;\r\n    currentRound: number;\r\n    players: BingoPlayerAreaInfo[];\r\n}\r\n\r\n//initialState\r\nconst initialBingoGameState: BingoGameState = createEmptyBingoGame(2, 5);\r\n\r\nconst bingoGameReducer = (state: BingoGameState = initialBingoGameState, action: BingoGameAction): BingoGameState => {\r\n\r\n    let newState: BingoGameState;\r\n\r\n    switch (action.type) {\r\n\r\n        case TOGGLE_GAME:\r\n\r\n            newState = {\r\n                ...state,\r\n                ...createEmptyBingoGame(2, 5, true),\r\n                isPlaying: true,\r\n            };\r\n            return newState;\r\n\r\n        case SELECT_CELL:\r\n\r\n            if (state.currentPlayer !== action.selectedCell.boardNumber || !state.isPlaying) {\r\n                return state;\r\n            }\r\n\r\n            newState = {\r\n                ...state,\r\n                currentRound: state.currentRound + 1,\r\n                currentPlayer: calcNextPlayer(state.currentRound, state.players.length),\r\n                players: state.players.map((player) => {\r\n\r\n                    const checkedCells: CellInfo[][] = checkCellInCells(player.cells, action.selectedCell);\r\n                    const totalBingoLines = getBingoLines(player.cells.length, checkedCells);\r\n                    const newCompletedLines = intersectionCells(player.completedLine, totalBingoLines);\r\n\r\n                    return {\r\n                        ...player,\r\n                        isCurrentPlayer: calcNextPlayer(state.currentRound, state.players.length) === player.playerNumber,\r\n                        cells: checkedCells,\r\n                        completedLine: [\r\n                            ...player.completedLine,\r\n                            ...newCompletedLines\r\n                        ]\r\n\r\n\r\n                    }\r\n\r\n                })\r\n            };\r\n            return newState;\r\n\r\n        case RESET_GAME:\r\n            newState = createEmptyBingoGame(2, 5, false);\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default bingoGameReducer;","import React from 'react';\r\nimport BingoGame, { BingoGameProps } from '../components/BingoGame';\r\nimport { connect } from 'react-redux';\r\nimport { toggleGame, selectCell } from '../modules/bingoGame';\r\nimport { GlobalStates } from '../modules';\r\n\r\n//BingoGame에 props로 global state를 전달해주는 컨테이너 컴포넌트\r\nfunction BingoGameContainer({\r\n\tisPlaying,\r\n\tcurrentPlayer,\r\n\twinner,\r\n\ttoggleGame,\r\n\tselectCell,\r\n\tplayers,\r\n}: BingoGameProps) {\r\n\treturn (\r\n\t\t<BingoGame\r\n\t\t\tisPlaying={isPlaying}\r\n\t\t\tcurrentPlayer={currentPlayer}\r\n\t\t\twinner={winner}\r\n\t\t\ttoggleGame={toggleGame}\r\n\t\t\tselectCell={selectCell}\r\n\t\t\tplayers={players}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalStates) => ({\r\n\tisPlaying: state.bingoGameReducer.isPlaying,\r\n\tcurrentPlayer: state.bingoGameReducer.currentPlayer,\r\n\twinner: state.bingoGameReducer.currentPlayer,\r\n\tplayers: state.bingoGameReducer.players,\r\n});\r\n\r\nexport default connect(mapStateToProps, { toggleGame, selectCell })(\r\n\tBingoGameContainer,\r\n);\r\n","import React from 'react';\nimport BingoGameContainer from './container/BingoGameContainer';\n\nfunction App() {\n\treturn (\n\t\t<section className=\"App\">\n\t\t\t<BingoGameContainer />\n\t\t</section>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport bingoGameReducer from './bingoGame';\r\nimport { BingoGameState } from './bingoGame';\r\n\r\n\r\nexport type GlobalStates = {\r\n    bingoGameReducer: BingoGameState;\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    bingoGameReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './reset.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './modules';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { checkWinner } from './lib/bingoUtils';\nimport { resetGame } from './modules/bingoGame';\n\nconst store = createStore(rootReducer, composeWithDevTools());\nstore.subscribe(() =>\n\tcheckWinner(store.getState().bingoGameReducer.players, () => {\n\t\tstore.dispatch(resetGame());\n\t}),\n);\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\nreportWebVitals();\n"],"sourceRoot":""}